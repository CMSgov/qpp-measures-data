const fs = require('fs');
const path = require('path');

const UNIQUE_COLUMN_CONSTRAINT = [
  'measureId',
  'benchmarkYear',
  'performanceYear',
  'submissionMethod'
];
const BENCHMARK_JSON_DIR = '../../../staging/benchmarks/json/';

// Returns an alphabetically-ordered list of files in the given pat
const getOrderedFileNames = (currentDir, relativePath) => {
  return fs.readdirSync(path.join(currentDir, relativePath));
};

// Generate a key in an object to store benchmarks in.
// Benchmarks with the same key will overwrite one another base
// which was loaded last. See mergeBenchmarkLayers for more details.
const getBenchmarkKey = (benchmark) => {
  let benchmarkKey = '';
  UNIQUE_COLUMN_CONSTRAINT.forEach((keyName) => {
    if (keyName in benchmark) {
      benchmarkKey += `${benchmark[keyName]}|`;
    } else {
      throw new Error('Key is missing: ' + keyName);
    }
  });

  return benchmarkKey;
};

// Accepts an array of relative file paths, loads json files,
// and merges them into a single object based on a unique column
// generated by getBenchmarkKey and UNIQUE_COLUMN_CONSTRAINT
// Note: Benchmarks with the same key will be overwritten by the last one loaded.
const mergeBenchmarkLayers = (benchmarkLayers) => {
  const mergedBenchmarks = new Map();

  benchmarkLayers.forEach((benchmarkLayer) => {
    const benchmarkFile = JSON.parse(fs.readFileSync(path.join(__dirname, BENCHMARK_JSON_DIR, benchmarkLayer), 'utf8'));
    benchmarkFile.forEach((benchmark) => {
      mergedBenchmarks.set(getBenchmarkKey(benchmark), benchmark);
    });
  });

  return [...mergedBenchmarks.values()];
};

module.exports = {
  getOrderedFileNames,
  getBenchmarkKey,
  mergeBenchmarkLayers
};
